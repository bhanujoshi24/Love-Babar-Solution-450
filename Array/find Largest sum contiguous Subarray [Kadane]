// { Driver Code Starts
import java.io.*;

class Array {
    
	public static void main (String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		int t = Integer.parseInt(br.readLine().trim()); //Inputting the testcases
		while(t-->0){
		    //size of array
		    int n = Integer.parseInt(br.readLine().trim());
		    int arr[] = new int[n];
		    String inputLine[] = br.readLine().trim().split(" ");
		    
		    //adding elements
		    for(int i=0; i<n; i++){
		        arr[i] = Integer.parseInt(inputLine[i]);
		    }
		    
		    Kadane obj = new Kadane();
		    
		    //calling maxSubarraySum() function
		    System.out.println(obj.maxSubarraySum(arr, n));
		}
	}
}

// } Driver Code Ends


class Kadane{
    /* Kadane's Algorithm:
    Initialize:
        max_so_far = 0
        max_ending_here = 0
    
    Loop for each element of the array
      (a) max_ending_here = max_ending_here + a[i]
      (b) if(max_so_far < max_ending_here)
                max_so_far = max_ending_here
      (c) if(max_ending_here < 0)
                max_ending_here = 0
    return max_so_far
    
    Explanation: Simple idea of the Kadane's algorithm is to
    look for all positive contiguous segments of the array
    (max_ending_here is used for this). And keep track of maximum 
    sum contiguous segment among all positive segments 
    (max_so_far is used for this). Each time we get a positive
    sum compare it with max_so_far and update max_so_far if it is 
    greater than max_so_far */
    int maxSubarraySum(int arr[], int n){
        
        int maxsum = Integer.MIN_VALUE;
        int maxsofar = 0;
        
        for(int i = 0;i<arr.length;i++){
            maxsofar+=arr[i];
            if(maxsum < maxsofar){
                maxsum = maxsofar;
            }
            if(maxsofar<0){
                maxsofar = 0;
            }
        }
        return maxsum;
    }
    
}

